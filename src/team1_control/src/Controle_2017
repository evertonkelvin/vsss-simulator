/**
 * @version 2013
 * Código utilizado para o Campeonato Brasileiro de Robótica de 2013 na categoria IEEE Very Small Size
 * Posição: 2º lugar
 * @version 2014
 * Código reutilizado para o Campeonato Brasileiro de Robótica de 2014 na categoria IEEE Very Small Size
 * Posição: Desclassificado fase de grupos [Problema de Hardware no transmissor de rádio]
 * @version 2015
 * Código reutilizado para o Campeonato Brasileiro de Robótica de 2015 na categoria IEEE Very Small Size
 * Posição: Desclassificado nas quartas de final -> Perdeu para ITAbots
 * @version 2016
 * Código reutilizado para o Campeonato Brasileiro de Robótica de 2015 na categoria IEEE Very Small Size
 * Posição: Desclassificado nas quartas de final -> Perdeu para ITAbots
 */

#include "TiposClasses.h"
#include "Auxiliares.h"
#include "Controle.h"

#define CteEstCmd 0.5
#define CteEstVel 0.5
#define CTE_PARADA 4

//#define SO_UM
#define ATEH_DOIS
//#define ATEH_TRES
//#define ATEH_QUATRO
//#define ATEH_CINCO

#define VELOCIDADE_ANGULAR_MAXIMA 17.8 //(vMaxRd-vMaxRe)*RAIO_RODA/DIST_RODAS//Vel1 = 8.9 //Vel2 = 17.85 //Vel3 = 26.8 //Vel4 = 35.7
#define VELOCIDADE_MAX 107.1		   //(vMaxRe+vMaxRd)*RAIO_RODA/2 //Vel3 = 107.1 //Vel4 = 142.8 //Vel5 = 178.5
#define RAIO_DA_RODA 1.6
#define RAIO_DISTANCIA 5 //cm
#define VEL_MAX 2
#define MASSA_ROBO 0.89

extern FutebolCamera *futCam[NUM_CAMERAS];

extern Estado estado[NUM_ROBOS_TIME * 2 + 1],
	estadoAnt[NUM_ROBOS_TIME * 2 + 1],
	estadoPrev[NUM_ROBOS_TIME * 2 + 1];

extern CmdEnviado cmdEnviado[10][NUM_ROBOS_TIME]; //comando enviado aos robos

float xObjAnt[3] = {0, 0, 0}, yObjAnt[3] = {0, 0, 0};

extern int indAtacante;
extern int indVolante;
extern int indGoleiro;

/**
 * CAMPOS POTENCIAIS
 * 1 - Bibliotecas
 * 2 - Constantes
 * 3 - Estrutura de Dados
 * 4 - Funções
 */

/**
 * 1 - Bibliotecas
 */
#include <stdlib.h>
#include <stdio.h>
#include <stdbool.h>
#include <math.h>

/**
 * 2 - Constantes
 */
#define MAX_X 43
#define MAX_Y 33 // Tem que ser 35 e deslocar 1 em todas as coordenadas em Y
#define DIV_CAMPO 4
#define W_SOR 1.8
#define WND_X 1350		// TAMANHO DA JANELA GRÁFICA EM X ----- VOLTAR PARA 1350
#define WND_Y 350		// TAMANHO DA JANELA GRÁFICA EM Y -----	VOLTAR PARA 350
#define TAM_RET 10		// SEMPRE QUE ALTERAR TAM_RET DEVE-SE ALTERAR LINE_LENGTH ------ VOLTAR PARA 10
#define LINE_LENGTH 8.0 // TAM_RET - 0.2*TAM_RET -> ESSA CONSTATE SEMPRE SERÁ DOUBLE/FLOAT
#define E 0.00001		// PRECISÃO DE CONVERGÊNCIA
#define X 0
#define Y 1
#define E_CPO 3

/**
 * 3 - Estrutura de Dados
 */
typedef struct position
{
	int posX;
	int posY;
	position *nextPosition;
} position_list;

position_list *caminhoRobo[3] = {NULL, NULL, NULL};

typedef struct campo
{
	float matPot[MAX_X][MAX_Y];	// Valores pertencentes ao intervalo [0,1]
	bool matBoolPot[MAX_X][MAX_Y]; // true = obstáculo ou meta, false = espaço livre
} campoPot;

float vAnt[3] = {0, 0, 0}; // Velocidade Anterior

/**
 * 4 - Funções
 */
void inicializa_obst_meta(campoPot *campoPotencial, int xObjetivo, int yObjetivo, int indJogador)
{
	int i, j, k;

	/**
	 * Inicializa paredes do campo de futebol
	 */
	for (i = 0; i < MAX_Y; i++)
	{ // Parede da esquerda
		campoPotencial->matPot[0][i] = 1;
		campoPotencial->matBoolPot[0][i] = true;
	}
	for (i = 0; i < MAX_Y; i++)
	{ // Parede da direita
		campoPotencial->matPot[MAX_X - 1][i] = 1;
		campoPotencial->matBoolPot[MAX_X - 1][i] = true;
	}
	for (i = 0; i < MAX_X; i++)
	{ // Parede de baixo
		campoPotencial->matPot[i][0] = 1;
		campoPotencial->matBoolPot[i][0] = true;
	}
	for (i = 0; i < MAX_X; i++)
	{ // Parede de cima
		campoPotencial->matPot[i][MAX_Y - 1] = 1;
		campoPotencial->matBoolPot[i][MAX_Y - 1] = true;
	}

	/**
	 * Inicializa células livres
	 */
	for (i = 1; i < MAX_X - 1; i++)
	{
		for (j = 1; j < MAX_Y - 1; j++)
		{
			campoPotencial->matBoolPot[i][j] = false;
			campoPotencial->matPot[i][j] = 0;
		}
	}

	if ((indJogador == indGoleiro) && estadoPrev[indJogador].x / DIV_CAMPO < MAX_X / 6)
	{ // Fazer verificação do robô goleiro estando atrás da linha imaginária
		for (i = 0; i < MAX_Y; i++)
		{ // Parede da esquerda
			campoPotencial->matPot[MAX_X / 6][i] = 1;
			campoPotencial->matBoolPot[MAX_X / 6][i] = true;
		}
	}
	/**
	 * Define células que contém o objetivo do robô
	 */
	campoPotencial->matBoolPot[xObjetivo][yObjetivo] = true;

	/**
	 * Parede virtual atrás da bola para evitar que o robô conduza a bola contra o próprio gol
	 */
	if (indJogador == indAtacante)
	{
		for (j = yObjetivo - 1; j <= yObjetivo + 1; j++)
		{
			for (i = xObjetivo + 1; i < xObjetivo + 4; i++)
			{
				campoPotencial->matBoolPot[i][j] = true; // parede virtual da meta
				campoPotencial->matPot[i][j] = 1;
			}
		}
	}
	// for (i = 0; i <= 2; i++) {
	// 	if (i != indJogador) {
	// 		if ((xObjetivo < estadoPrev[i].x / DIV_CAMPO - 1
	// 				|| xObjetivo > estadoPrev[i].x / DIV_CAMPO + 1)
	// 				&& (yObjetivo < estadoPrev[i].y / DIV_CAMPO - 1
	// 						|| yObjetivo > estadoPrev[i].y / DIV_CAMPO + 1))
	// 			for (j = (int) estadoPrev[i].x / DIV_CAMPO - 1;
	// 					j <= (int) estadoPrev[i].x / DIV_CAMPO + 1; j++) {
	// 				for (k = (int) estadoPrev[i].y / DIV_CAMPO - 1;
	// 						k <= (int) estadoPrev[i].y / DIV_CAMPO + 1; k++) {
	// 					campoPotencial->matPot[j][k] = 1;
	// 					campoPotencial->matBoolPot[j][k] = true;
	// 				}
	// 			}
	// 	}
	// }
	/**
	 * Insere obstáculos no campo potencial referente aos robôs adversários
	 */
	for (i = 4; i <= 6; i++)
	{
		campoPotencial->matPot[(int)estadoPrev[i].x / DIV_CAMPO][(int)estadoPrev[i].y / DIV_CAMPO] = 1;
		campoPotencial->matBoolPot[(int)estadoPrev[i].x / DIV_CAMPO][(int)estadoPrev[i].y / DIV_CAMPO] = true;
	}
}

/**
 * Calcula Campo Potencial Harmônico utilizando método de relaxação/relaxamento SOR
 * @param  campoPotencial Matriz do Campo Potencial
 * @return boolean		Boolean indicando convergência do cálculo do campo potencial
 */
bool calcula_campo_SOR(campoPot *campoPotencial)
{
	int i, j;
	float resultTemp;
	bool convergiu = true;
	do
	{
		convergiu = true;
		for (i = 1; i < MAX_X - 1; i++)
		{
			for (j = 1; j < MAX_Y - 1; j++)
			{
				if (campoPotencial->matBoolPot[i][j] == false)
				{
					resultTemp = W_SOR * (campoPotencial->matPot[i + 1][j] + campoPotencial->matPot[i - 1][j] + campoPotencial->matPot[i][j + 1] + campoPotencial->matPot[i][j - 1] - 4 * campoPotencial->matPot[i][j]) / 4 + campoPotencial->matPot[i][j];
					if ((campoPotencial->matPot[i][j] - resultTemp > E) || (resultTemp - campoPotencial->matPot[i][j] > E))
						convergiu = false;
					campoPotencial->matPot[i][j] = resultTemp;
				}
			}
		}
	} while (!convergiu);
	return convergiu;
}

/**
 * Calcula Campo Potencial Localmente Orientado utilizando método de relaxação/relaxamento SOR
 * @param  campoPotencial Matriz do Campo Potencial
 * @param  v_CPO          Vetor com a orientação do campo potencial
 * @param  xObjetivo      Coordenada X do objetivo vinda da estratégia
 * @param  yObjetivo      Coordenada Y do objetivo vinda da estratégia
 * @return boolean        Boolean indicando convergência do cálculo do campo potencial
 */
bool calcula_campo_SOR_CPLO(campoPot *campoPotencial, float v_CPO[2], int xObjetivo, int yObjetivo)
{
	int i, j, cont = 0;
	float resultTemp;
	bool convergiu = true;
	do
	{
		for (i = 1; i < MAX_X - 1; i++)
		{
			for (j = 1; j < MAX_Y - 1; j++)
			{
				if (campoPotencial->matBoolPot[i][j] == false)
				{
					if ((i < xObjetivo / DIV_CAMPO + 2 && j < yObjetivo / DIV_CAMPO + 2) && (i > xObjetivo / DIV_CAMPO - 2 && j > yObjetivo / DIV_CAMPO - 2))
					{
						resultTemp = (campoPotencial->matPot[i + 1][j] + campoPotencial->matPot[i - 1][j] + campoPotencial->matPot[i][j + 1] + campoPotencial->matPot[i][j - 1]) / 4 + ((campoPotencial->matPot[i + 1][j] - campoPotencial->matPot[i - 1][j]) * v_CPO[X] + (campoPotencial->matPot[i][j + 1] - campoPotencial->matPot[i][j - 1]) * v_CPO[Y]) * E_CPO / 8;
					}
					else
					{
						resultTemp = W_SOR * (campoPotencial->matPot[i + 1][j] + campoPotencial->matPot[i - 1][j] + campoPotencial->matPot[i][j + 1] + campoPotencial->matPot[i][j - 1] - 4 * campoPotencial->matPot[i][j]) / 4 + campoPotencial->matPot[i][j];
					}
					if ((campoPotencial->matPot[i][j] - resultTemp > E) || (resultTemp - campoPotencial->matPot[i][j] > E))
						convergiu = false;
					campoPotencial->matPot[i][j] = resultTemp;
				}
			}
		}
		cont++;
	} while (!convergiu && cont < 500);
	return convergiu;
}

/**
 * Variáveis e Constantes Controle PID
 */
#define TEMPO_EXECUCAO 1 / 30000 // em milisegundos
#define KP 4					 // Constante Proporcional de ganho do PID
#define KI 2 * TEMPO_EXECUCAO	// Constante Integrativa de ganho do PID
#define KD 2 / TEMPO_EXECUCAO	// Constante Derivativa de ganho do PID
static double ITerm;
//Constante da força aplicada pelo campo potencial
#define KF 1.5
#define K_ALFA 2

/**
 * PID baseado na biblioteca do PIDArduino
 * Utlizado para calcular a velocidade angular considerando a diferença entre ângulos
 * @param  error     diferença entre ângulos
 * @param  lastInput Último ângulo calculado do Robô
 * @param  input     Atual ângulo calculado do Robô
 * @return           Velocidade Agular
 */
double PID(double error, double lastInput, double input)
{
	ITerm += (KI * error);
	double dInput = (input - lastInput);
	/*Compute PID Output*/
	// double output = KP * error + ITerm - KD * dInput;
	double output = KP * error - KD * dInput;

	return output;
}

campoPot campoPotencial[3];

/**
 * Calcula comando a ser enviado pelo rádio para as rodas esquerda e direita do robô
 * @param indJogador  Índice do Jogador ao qual o Campo Potencial se refere
 * @param angObjetivo Ângulo do objetivo vinda da estratégia
 * @param xObjetivo   Coordenada X do objetivo vinda da estratégia
 * @param yObjetivo   Coordenada Y do objetivo vinda da estratégia
 * @param velObjetivo Velocidade desejada vinda da estratégia
 * @return cmdEnviado[0][indJogador].esq = pe; Altera Variável Global de Comando que vai ser enviado para o rádio - Roda Esquerda
 * @return cmdEnviado[0][indJogador].dir = pd; Altera Variável Global de Comando que vai ser enviado para o rádio - Roda Direita
 */
void calculaCmd(int indJogador, int angObjetivo, int xObjetivo, int yObjetivo, int velObjetivo, bool isKick)
{
	float wObj, vObj, F, dx, dy, v_CPO[2], d, angRobo, angRoboAnt, xRobo, yRobo, ang, auxAng, K_ro;
	int ve, vd, pe, pd, i, j, wSignal, vSignal, flagDirection;
	double directionAngle, K_alfa, lim = 180 / 8;
	static int count = 0;
	bool corrigeAngulo = false;

	/**
	 * Controle dos Robôs Atacante e Defensor
	 */
	if (true)
	{
		if (!isKick)
		{
			if (xObjetivo > 0 && yObjetivo > 0)
			{
				v_CPO[0] = cos((double)(angObjetivo) / 180 * M_PI);															 // Componente x do vetor de orientação
				v_CPO[1] = sin((double)(angObjetivo) / 180 * M_PI);															 // Componente y do vetor de orientação
				inicializa_obst_meta(&campoPotencial[indJogador], xObjetivo / DIV_CAMPO, yObjetivo / DIV_CAMPO, indJogador); // Prepara o campo para cada jogador, já convertendo os objetivo para que se encaixem nas células da matriz
				if (indJogador == indGoleiro)
				{
					calcula_campo_SOR(&campoPotencial[indJogador]);
				}
				else
				{
					calcula_campo_SOR_CPLO(&campoPotencial[indJogador], v_CPO, xObjetivo, yObjetivo);
				}
			}

			xObjAnt[indJogador] = xObjetivo;		 // Guarda o novo objetivo no vetor de objetivo anterior
			yObjAnt[indJogador] = yObjetivo;		 // Guarda o novo objetivo no vetor de objetivo anterior
			angRobo = estadoPrev[indJogador].angulo; // Pega o angulo previsto do robo
			xRobo = estadoPrev[indJogador].x;		 // Pega o valor previsto de x das coordenadas do robo
			yRobo = estadoPrev[indJogador].y;		 // Pega o valor previsto de y das coordenadas do robo
			dx = xObjetivo - xRobo;					 // Distância em x do objetivo
			dy = yObjetivo - yRobo;					 // Distância em y do objetivo
			d = sqrt(dx * dx + dy * dy);			 // Mede a distancia entre os pontos do robo e do objetivo

			i = xRobo / DIV_CAMPO; // Pega a celula do campo onde se encontra o robo em x
			j = yRobo / DIV_CAMPO; // Pega a celula do campo onde se encontra o robo em y
			//printf("i=%d | j=%d \n", i, j);
			directionAngle = atan2(
								 (double)(campoPotencial[indJogador].matPot[i][j - 1] - campoPotencial[indJogador].matPot[i][j + 1]) /*Pega o peso do campo nas colunas ao lado da do robo para saber quanto de suas partes está nessa células ?*/,
								 (double)(campoPotencial[indJogador].matPot[i - 1][j] - campoPotencial[indJogador].matPot[i + 1][j]) /*Pega o peso do campo nas linhas ao lado da do robo para saber quanto de suas partes está nessa células ?*/) *
							 180 / M_PI; // Calculado o angulo cuja tangente passa pelo ponto dado pelas operações, esse angulo eh convertido para graus

			ang = (float)directionAngle;

			if (ang < 0)
			{
				ang += 360;
			} // Mantém o intervalo do angulo achado entre 0 e 360

			if ((estadoPrev[indJogador].x > xObjetivo - RAIO_DISTANCIA	 /*Distancia de menos de 5 cm da coordenada*/
				 && estadoPrev[indJogador].x < xObjetivo + RAIO_DISTANCIA) /*Se a coordenada está a frente do robo*/
				&& (estadoPrev[indJogador].y > yObjetivo - RAIO_DISTANCIA  /*Distancia de menos de 5 cm da coordenada*/
					&& estadoPrev[indJogador].y < yObjetivo + RAIO_DISTANCIA))
			{ /*Se a coordenada está a frente do robo*/
				ang = angObjetivo;
				if (ang < 0)
				{
					ang += 360;
				} // Mantém o intervalo do angulo achado entre 0 e 360
				corrigeAngulo = true;
			}

			/**
			 * ver cálculo dos ângulos para que o robô não precise dar uma volta inteira.
			 * Utilizando flag de direção, primeiro e quarto quadrante flag = 1, e segundo e terceiro quadrante flag = -1.
			 */

			/**
			 * Início do Novo Controle de Velocidade
			 */
			if (angRobo > 180)
			{
				angRobo -= 360;
			} // Pro primeiro quadrante acessa-se de 0 a 180, terceiro e quarto por 0 a -180

			double dAng = ang - angRobo; // Calcula a diferença entre o angulo atual do robo e o objetivo
			if (dAng > 180)
			{
				dAng -= 360;
			} // Pro primeiro quadrante acessa-se de 0 a 180, terceiro e quarto por 0 a -180

			if ((dAng <= 90 && dAng > 0) || (dAng <= 0 && dAng >= -90))
			{					   //Se está "na frente" do robo
				flagDirection = 1; // primeiro e quarto quadrante
			}
			else if ((dAng <= 180 && dAng > 90) || (dAng < -90 && dAng >= -180))
			{						//Se está "nas costas" do robo
				flagDirection = -1; // segundo e terceiro quadrante
				if (dAng <= 180 && dAng > 90)
				{					   // Intervalo positivo = atrás para esquerda
					dAng = 180 - dAng; // O quanto falta para chegar a 180
				}
				else
				{						// Intervalo negativo = atrás para a direita
					dAng = -180 - dAng; // O quanto falta para chegar a -180
				}
			}
			/**
			 * Início do trecho do código que deve ser alterado
			 * Alterar cálculo das velocidades angular e linear a seguir
			 */

			//Força aplicada na célula  do campo potencial
			F = KF * campoPotencial[indJogador].matPot[i][j];

			//Velocidade do robô calculada em função da força vinda do campo potencial
			vObj = (2 / MASSA_ROBO) * (F * sin(((double)ang) * (M_PI / 180)) * (dy) + F * cos(((double)ang) * (M_PI / 180)) * (dx)) + pow(vAnt[indJogador], 2);
			if (vObj <= 172 && indJogador != indGoleiro)
			{ // Velocidade baixa próximo da meta
				vObj *= 1.5;
			}

			if ((xObjetivo == estadoPrev[3].x) && (yObjetivo == estadoPrev[3].y))
			{
				vObj = 250 - vObj;
			}

			if ((xObjAnt[indJogador] != xObjetivo) || (yObjAnt[indJogador] != yObjetivo) && d <= 30)
				vAnt[indJogador] = vObj;

			K_ro = abs(vObj / (cos(dAng * (M_PI / 180)) * d));

			wObj = K_ro * sin(dAng * (M_PI / 180)) * cos(dAng * (M_PI / 180)) + K_ALFA * (dAng * (M_PI / 180));

			/**
			 * Fim do trecho do código que deve ser alterado para o cálculo de
			 * velocidade considerando a função candidata de Lyapunov
			 */

			pe = (int)((2 * vObj - wObj * DIST_ENTRE_RODAS) / (2 * RAIO_DA_RODA)) / 33;
			if ((d >= 6) && (pe == 0))
			{
				vObj *= 2;
			}
			pe = (int)((2 * vObj - wObj * DIST_ENTRE_RODAS) / (2 * RAIO_DA_RODA)) / 33;

			pe *= flagDirection;
			if (pe > 7)
			{
				pe = 7;
			}
			else if (pe < -7)
				pe = -7;
			if (pe < 0)
				pe = -pe + 8;
			pd = (int)((2 * vObj - wObj * DIST_ENTRE_RODAS) / (2 * RAIO_DA_RODA)) / 33;
			if ((d >= 6) && (pd == 0))
			{
				vObj *= 2;
			}
			pd = (int)((2 * vObj + wObj * DIST_ENTRE_RODAS) / (2 * RAIO_DA_RODA)) / 33;
			pd *= flagDirection;
			if (pd > 7)
			{
				pd = 7;
			}
			else if (pd < -7)
				pd = -7;
			if (pd < 0)
				pd = -pd + 8;
			/**
			 * Fim do novo controle de velocidade
			 */

			/**
			 * MB Após escolher a velocidade chamar a função calcula velocidade dos motores
			 * presente no controle de 2012, para evitar possíveis erros de
			 * velocidade
			 */

			cmdEnviado[0][indJogador].esq = pe * 1;
			cmdEnviado[0][indJogador].dir = pd * 1;
			/**
		 * Chute rodando no pr´oprio eixo
		 */
		}
		else
		{
			xRobo = estadoPrev[indJogador].x;
			yRobo = estadoPrev[indJogador].y;
			if (yRobo <= 65)
			{ //Canto inferior
				cmdEnviado[0][indJogador].esq = -5 * 1;
				cmdEnviado[0][indJogador].dir = 5 * 1;
			}
			else
			{ // Canto superior
				cmdEnviado[0][indJogador].esq = 5 * 1;
				cmdEnviado[0][indJogador].dir = -5 * 1;
				//printf("chute esquerda\n");
			}
		}

		/**
	 * Controle do Robô Goleiro
	 */
	}
	else
	{
		double lim = 180 / 8;

		angRobo = estadoPrev[indJogador].angulo;
		xRobo = estadoPrev[indJogador].x;
		yRobo = estadoPrev[indJogador].y;
		dx = xObjetivo - xRobo;
		dy = yObjetivo - yRobo;
		d = sqrt(dx * dx + dy * dy);

		ang = atan2(yObjetivo - yRobo, xObjetivo - xRobo) * 180 / M_PI;
		if (ang < 0)
		{
			ang += 2 * 180;
		}
		double dAng = ang - angRobo;
		if (dAng < 0)
		{
			dAng += 2 * 180;
		}

		if (d < 10)
		{
			vObj = 2;
			wObj = 1;
		}
		else if (d < 6)
		{
			vObj = 0;
			wObj = 0;
		}
		else
		{
			vObj = 3;
			wObj = 1;
		}

		if (dAng < lim)
		{
			pe = vObj;
			pd = vObj;
		}
		else if (dAng < 180 / 2 - lim)
		{
			pe = 0;
			pd = wObj;
		}
		else if (dAng < 180 / 2)
		{
			pe = -wObj;
			pd = wObj;
		}
		else if (dAng < 180 / 2 + lim)
		{
			pe = wObj;
			pd = -wObj;
		}
		else if (dAng < 180 - lim)
		{
			pe = 0;
			pd = -wObj;
		}
		else if (dAng < 180 + lim)
		{
			pe = -vObj;
			pd = -vObj;
		}
		else if (dAng < 3 * 180 / 2 - lim)
		{
			pe = -wObj;
			pd = 0;
		}
		else if (dAng < 3 * 180 / 2)
		{
			pe = -wObj;
			pd = wObj;
		}
		else if (dAng < 3 * 180 / 2 + lim)
		{
			pe = wObj;
			pd = -wObj;
		}
		else if (dAng < 2 * 180 - lim)
		{
			pe = wObj;
			pd = 0;
		}
		else
		{
			pe = vObj;
			pd = vObj;
		}

		cmdEnviado[0][indJogador].esq = pe * 1;
		cmdEnviado[0][indJogador].dir = pd * 1;
	}
}